Model SysADLModel ; package SysADL.types { value type Int { } value type Boolean { } value type String { } value type Void { } value type Real { } dimension Temperature unit Celsius { dimension = Temperature } unit Fahrenheit { dimension = Temperature } value type Temperature { dimension = Temperature } value type CelsiusTemperature extends Temperature { unit = Celsius dimension = Temperature } value type FahrenheitTemperature extends Temperature { unit = Fahrenheit dimension = Temperature } enum Command { On , Off } datatype Commands { attributes : cooler : Command ; heater : Command ; } } package RTCSystemConnectors { import RTCSystemPorts ; connector def FahrenheitToCelsiusCN { participants : ~ source : FTemperatureOPT ; ~ destination : CTemperatureIPT ; flows : FahrenheitTemperature from source to destination } connector def CTemperatureCN { participants : ~ source : CTemperatureOPT ; ~ destination : CTemperatureIPT ; flows : CelsiusTemperature from source to destination } connector def DetectPresenceCN { participants : ~ source : PresenceOPT ; ~ destination : PresenceIPT ; flows : Boolean from source to destination } connector def SendCommandCN { participants : ~ source : CommandOPT ; ~ destination : CommandIPT ; flows : Command from source to destination } } package RTCSystemComponents { import RTCSystemPorts ; import SysADL.types ; import RTCSystemConnectors ;
	component def RTCSystem { } } package RTCSystemPorts { import SysADL.types ; port def FTemperatureOPT { flow out FahrenheitTemperature } port def CTemperatureOPT { flow out CelsiusTemperature value type CelsiusTemperature { unit = SysADL.types.Celsius dimension = SysADL.types.Temperature } } port def FTemperatureIPT { flow in FahrenheitTemperature } port def CTemperatureIPT { flow in CelsiusTemperature } port def CommandOPT { flow out Command } port def CommandIPT { flow in Command } port def PresenceOPT { flow out Boolean } port def PresenceIPT { flow in Boolean } }